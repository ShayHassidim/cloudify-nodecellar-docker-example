tosca_definitions_version: cloudify_dsl_1_0

imports:
  - http://www.getcloudify.org/spec/cloudify/3.2m7/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.2m7/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-docker-plugin/1.1/plugin.yaml

inputs:
  image:
    description: >
      The OpenStack image ID 

  flavor:
    description: >
      The OpenStack flavor

  agent_user:
    description: >
      User name used when SSH-ing into the started machine
    default: ubuntu

  web_port:
    description: >
      Which port you want to map the web port to.
    default: 8080

  mongo_port:
    description: >
      Which port you want to map the mongo port to.
    default: 27017

  web_status_port:
    description: >
      Which port for the mongo web status page.
    default: 28017

  nodecellar_container_port_bindings:
    description: >
      A dict of port bindings for the node container.
    default:
      8080: 8080

  mongo_container_port_bindings:
    description: >
      A dict of port bindings for the mongo container.
    default:
      27017: 27017
      28017: 28017

node_types:

  vm_with_docker_running:
    derived_from: cloudify.openstack.nodes.Server
    properties:
      cloudify_agent:
        default:
          user: { get_input: agent_user }
          home_dir: /home/ubuntu
      server:
        default:
          image: { get_input: image }
          flavor: { get_input: flavor }
          userdata: |
            #!/bin/bash
            sudo service ssh stop
            curl -o install.sh -sSL https://get.docker.com/
            sudo sh install.sh
            sudo groupadd docker
            sudo gpasswd -a ubuntu docker
            sudo service docker restart
            sudo service ssh start

node_templates:

  nodecellar_floatingip:
    type: cloudify.openstack.nodes.FloatingIP

  mongod_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      security_group:
        name: MongoDBSecGroup
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_input: mongo_port }
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_input: web_status_port }
        - remote_ip_prefix: 0.0.0.0/0
          port: 22

  nodecellar_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      security_group:
        name: NodeJSSecGroup
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_input: web_port }
        - remote_ip_prefix: 0.0.0.0/0
          port: 22

  mongo_vm:
    type: vm_with_docker_running
    properties:
      cloudify_agent:
        user: { get_input: agent_user }
        home_dir: /home/ubuntu
    relationships:
      - type: cloudify.openstack.server_connected_to_security_group
        target: mongod_security_group

  node_vm:
    type: vm_with_docker_running
    properties:
      cloudify_agent:
        user: { get_input: agent_user }
        home_dir: /home/ubuntu
    relationships:
      - target: nodecellar_security_group
        type: cloudify.openstack.server_connected_to_security_group
      - target: nodecellar_floatingip
        type: cloudify.openstack.server_connected_to_floating_ip

  mongod_container:
    type: cloudify.docker.Container
    properties:
      name: mongod
      image:
        repository: dockerfile/mongodb
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: docker.docker_plugin.tasks.create_container
          inputs:
            params:
              ports:
                - { get_input: mongo_port }
                - { get_input: web_status_port }
              stdin_open: true
              tty: true
              command: mongod --rest --httpinterface --smallfiles
        start:
          implementation: docker.docker_plugin.tasks.start
          inputs:
            params:
              port_bindings: { get_input: mongo_container_port_bindings }
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongo_vm

  nodecellar_container:
    type: cloudify.docker.Container
    properties:
      name: nodecellar
      image:
        repository: uric/nodecellar
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: docker.docker_plugin.tasks.create_container
          inputs:
            params:
              ports:
                - { get_input: web_port }
              stdin_open: true
              tty: true
              command: nodejs server.js
              environment:
                NODECELLAR_PORT: { get_input: web_port }
                MONGO_PORT: { get_input: mongo_port }
                MONGO_HOST: { get_property: [ mongod_container, name ] }
        start:
          implementation: docker.docker_plugin.tasks.start
          inputs:
            params:
              port_bindings: { get_input: nodecellar_container_port_bindings }
              extra_hosts:
                mongod: { get_attribute: [ mongo_vm, ip ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: node_vm
      - type: cloudify.relationships.depends_on
        target: mongod_container

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ nodecellar_floatingip, floating_ip_address ] }
      port: { get_input: web_port }
