tosca_definitions_version: cloudify_dsl_1_0

imports:
  - http://www.getcloudify.org/spec/cloudify/3.2m8/types.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/tosca-vcloud-plugin/1.0m2/plugin.yaml
  - http://www.getcloudify.org/spec/docker-plugin/1.2m8/plugin.yaml

inputs:
  catalog:
    description: >
      The vCloud catalog
    default: ''

  template:
    description: >
      The vCloud template
    default: ''

  agent_user:
    description: >
      User name used when SSH-ing into the started machine
    default: ubuntu

  web_port:
    description: >
      Which port you want to map the web port to.
    default: 8080

  mongo_port:
    description: >
      Which port you want to map the mongo port to.
    default: 27017
    
  web_status_port:
    description: >
      Which port for the mongo web status page.
    default: 28017

  floating_ip_gateway:
    type: string

  mongodb_docker_image:
    type: string
    default: dockerfile/mongodb
 
  nodecellar_docker_image:
    type: string
    default: uric/nodecellar

  management_network_name:
    type: string    

node_templates:
  vm:
    type: cloudify.vcloud.nodes.Server
    properties:
      cloudify_agent:
          user: { get_input: agent_user }
          home_dir: /home/ubuntu
      server:
          catalog: { get_input: catalog }
          template: { get_input: template }
      management_network: { get_input: management_network_name }

    relationships:
      - target: management_port
        type: cloudify.vcloud.server_connected_to_port
      - target: nodecellar_floatingip
        type: cloudify.vcloud.server_connected_to_floating_ip
 

  nodecellar_container:
    type: cloudify.docker.Container
    properties:
      name: nodecellar
      image:
        repository: { get_input: nodecellar_docker_image }
      ports:
        8080: { get_input: web_port }
      params:
        stdin_open: true
        tty: true
        command: nodejs server.js
        links:
           mongod: { get_property: [ mongod_container, name ] }
        environment:
          NODECELLAR_PORT: { get_input: web_port }
          MONGO_PORT: { get_input: mongo_port }
          MONGO_HOST: { get_property: [ mongod_container, name ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: vm
      - type: cloudify.relationships.connected_to
        target: mongod_container

  mongod_container:
    type: cloudify.docker.Container
    properties:
      name: mongod
      image:
        repository: { get_input: mongodb_docker_image }
      ports:
        27017: { get_input: mongo_port }
        28017: { get_input: web_status_port }
      params:
        stdin_open: true
        tty: true
        command: mongod --rest --httpinterface --smallfiles
    relationships:
      - type: cloudify.relationships.contained_in
        target: vm

  management_port:
      type: cloudify.vcloud.nodes.Port
      properties:
          port:
            network: { get_input: management_network_name }
            ip_allocation_mode: dhcp
            primary_interface: true
 
  nodecellar_floatingip:
      type: cloudify.vcloud.nodes.FloatingIP
      properties:
          floatingip:
              gateway: { get_input: floating_ip_gateway }

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ nodecellar_floatingip, public_ip ] }
      port: { get_input: web_port }
